Addtionally, local environments can also be implemented within functions as shown in the following examples:

    function foo()
    	variable output
    	newdatafolder/s local
    		... make waves, compute ...
    		... assign computed value to 'output' ...
    	killdatafolder : // this will kill any waves still residing in 'local'
    	return output
    end

    function bar1()
    	newdatafolder/s local
    		make localwave = {1}
    		make/n=(numpnts(localwave)) transformed = fn(localwave[p])
    		duplicate transformed root:mynamespace:mywave
    		... and so on ...
    	killdatafolder : // this will kill any waves still residing in 'local'
    end

    function bar2()
    	newdatafolder/s local
    		make localwave = {1}
    		make/n=(numpnts(localwave)) root:mynamespace:mywave
    		wave transformed = root:mynamespace:mywave
    		transformed = fn(localwave[p])
    		... and so on ...
    	killdatafolder : // this will kill any waves still residing in 'local'
    end

    function bar3(wavefullname) // defined closer to a fortran subroutine but not really
    	string wavefullname
    	newdatafolder/s local
    		make localwave = {1}
    		make/n=(numpnts(localwave)) $wavefullname
    		wave transformed = $wavefullname
    		transformed = fn(localwave[p])
    		... and so on ...
    	killdatafolder : // this will kill any waves still residing in 'local'
    end

    function twonorm(wavereference) // defined more like a fortran subroutine
    	wave wavereference
    	newdatafolder/s local
    		make/n=(numpnts(wavereference)) wavesq = wavereference[p]^2
    		wavereference = wavereference[p]/sqrt(sum(wavesq))
    	killdatafolder :
    end
